<?php
/**
 * InlineResponse2001Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PreflightAPI
 *
 * Preflighting in printing is the process of checking a design file for inefficiencies/errors and making sure itâ€™s set-up correctly before before sending it to print or final production. Preparation for printed jobs ranges according to the complexity of a project, but there are some fundamental things to check before send each print job to ensure that you are producing the intended outcome.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001Data Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'framed_pdf' => 'string',
        'fixed_pdf' => 'string',
        'preview' => 'string',
        'file_size' => 'string',
        'preflight_effect' => 'string',
        'preflight_status' => 'string',
        'page' => 'string',
        'credits_cost' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'framed_pdf' => null,
        'fixed_pdf' => null,
        'preview' => null,
        'file_size' => null,
        'preflight_effect' => null,
        'preflight_status' => null,
        'page' => null,
        'credits_cost' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'framed_pdf' => 'Framed PDF',
        'fixed_pdf' => 'Fixed PDF',
        'preview' => 'Preview',
        'file_size' => 'File size',
        'preflight_effect' => 'Preflight effect',
        'preflight_status' => 'Preflight status',
        'page' => 'Page',
        'credits_cost' => 'Credits cost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'framed_pdf' => 'setFramedPdf',
        'fixed_pdf' => 'setFixedPdf',
        'preview' => 'setPreview',
        'file_size' => 'setFileSize',
        'preflight_effect' => 'setPreflightEffect',
        'preflight_status' => 'setPreflightStatus',
        'page' => 'setPage',
        'credits_cost' => 'setCreditsCost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'framed_pdf' => 'getFramedPdf',
        'fixed_pdf' => 'getFixedPdf',
        'preview' => 'getPreview',
        'file_size' => 'getFileSize',
        'preflight_effect' => 'getPreflightEffect',
        'preflight_status' => 'getPreflightStatus',
        'page' => 'getPage',
        'credits_cost' => 'getCreditsCost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['framed_pdf'] = isset($data['framed_pdf']) ? $data['framed_pdf'] : null;
        $this->container['fixed_pdf'] = isset($data['fixed_pdf']) ? $data['fixed_pdf'] : null;
        $this->container['preview'] = isset($data['preview']) ? $data['preview'] : null;
        $this->container['file_size'] = isset($data['file_size']) ? $data['file_size'] : null;
        $this->container['preflight_effect'] = isset($data['preflight_effect']) ? $data['preflight_effect'] : null;
        $this->container['preflight_status'] = isset($data['preflight_status']) ? $data['preflight_status'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['credits_cost'] = isset($data['credits_cost']) ? $data['credits_cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets framed_pdf
     *
     * @return string
     */
    public function getFramedPdf()
    {
        return $this->container['framed_pdf'];
    }

    /**
     * Sets framed_pdf
     *
     * @param string $framed_pdf Framed PDF - link to file with added color frames - one to show bleed box, second to show trim box
     *
     * @return $this
     */
    public function setFramedPdf($framed_pdf)
    {
        $this->container['framed_pdf'] = $framed_pdf;

        return $this;
    }

    /**
     * Gets fixed_pdf
     *
     * @return string
     */
    public function getFixedPdf()
    {
        return $this->container['fixed_pdf'];
    }

    /**
     * Sets fixed_pdf
     *
     * @param string $fixed_pdf Fixed PDF - link to fixed file
     *
     * @return $this
     */
    public function setFixedPdf($fixed_pdf)
    {
        $this->container['fixed_pdf'] = $fixed_pdf;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string $preview Preview - link to preview file (with added frames). You can show it on the page so that the customer can see the processed file
     *
     * @return $this
     */
    public function setPreview($preview)
    {
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return string
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param string $file_size File size
     *
     * @return $this
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets preflight_effect
     *
     * @return string
     */
    public function getPreflightEffect()
    {
        return $this->container['preflight_effect'];
    }

    /**
     * Sets preflight_effect
     *
     * @param string $preflight_effect Preflight effect - list of errors and warnings found
     *
     * @return $this
     */
    public function setPreflightEffect($preflight_effect)
    {
        $this->container['preflight_effect'] = $preflight_effect;

        return $this;
    }

    /**
     * Gets preflight_status
     *
     * @return string
     */
    public function getPreflightStatus()
    {
        return $this->container['preflight_status'];
    }

    /**
     * Sets preflight_status
     *
     * @param string $preflight_status Preflight status
     *
     * @return $this
     */
    public function setPreflightStatus($preflight_status)
    {
        $this->container['preflight_status'] = $preflight_status;

        return $this;
    }

    /**
     * Gets page
     *
     * @return string
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param string $page Page
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets credits_cost
     *
     * @return string
     */
    public function getCreditsCost()
    {
        return $this->container['credits_cost'];
    }

    /**
     * Sets credits_cost
     *
     * @param string $credits_cost Credits cost - depending on the purchased option, we settle accounts with clients using virtual \"Credits\" units. Here we provide the \"cost\" of the operation. Not applicable if you use the time plan
     *
     * @return $this
     */
    public function setCreditsCost($credits_cost)
    {
        $this->container['credits_cost'] = $credits_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


